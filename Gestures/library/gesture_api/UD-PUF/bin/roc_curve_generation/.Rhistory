resamples(list(model, model))
results <- resamples(list(model, model))
summary(results)
pdf("output/best_plot.pdf")
plot(model)
dev.off()
library("pROC")
source("best_model_analysis.r")
source("best_model_analysis.r")
source("best_model_analysis.r")
pdf("output/best_plot.pdf")
plot(model)
dev.off()
pdf("output/best_ROC.pdf")
# select a parameter to plot for
selectedIndices <- model$pred$mtry == 20
plot.roc(model$pred$obs[selectedIndices],
         model$pred$M[selectedIndices])
dev.off()
model$pred$mtry
model$pred
head(model$pred)
summary(model)
q()
source("best_model_analysis.r")
summary(model)
pdf("output/best_plot.pdf")
plot(model)
dev.off()
source("svm_classifier.r")
pdf("output/classifier_parallel_plot.pdf")
parallelplot(results)
dev.off()
pdf("output/classifier_splom_plot.pdf")
splom(results)
dev.off()
pdf("output/classifier_density_plot.pdf")
densityplot(results)
dev.off()
# boxplots of results
pdf("output/classifier_box_plot.pdf")
bwplot(results)
dev.off()
# dot plots of results
pdf("output/classifier_dot_plot.pdf")
dotplot(results)
dev.off()
# ALSO: print all plots in one file for easy viewing
pdf("output/classifier_all.pdf")
#xyplot(results)
parallelplot(results)
splom(results)
densityplot(results)
bwplot(results)
dotplot(results)
dev.off()
summary(diffs)
# summarize the results
summary(results)
#
# test that the differences in models are significant
#
# difference in model predictions
diffs <- diff(results)
# summarize p-values for pair-wise comparisons
summary(diffs)
results <- resamples(model_list)
# summarize the results
summary(results)
#
# test that the differences in models are significant
#
# difference in model predictions
diffs <- diff(results)
# summarize p-values for pair-wise comparisons
summary(diffs)
###
# PLOTS
###
pdf("output/classifier_parallel_plot.pdf")
parallelplot(results)
dev.off()
pdf("output/classifier_splom_plot.pdf")
splom(results)
dev.off()
pdf("output/classifier_density_plot.pdf")
densityplot(results)
dev.off()
# boxplots of results
pdf("output/classifier_box_plot.pdf")
bwplot(results)
dev.off()
# dot plots of results
pdf("output/classifier_dot_plot.pdf")
dotplot(results)
dev.off()
# ALSO: print all plots in one file for easy viewing
pdf("output/classifier_all.pdf")
#xyplot(results)
parallelplot(results)
splom(results)
densityplot(results)
bwplot(results)
dotplot(results)
dev.off()
model_list
results <- resamples(model_list)
head(data)
head(data[[1]])
model_list
model_list[-lda]
model_list[-"lda"]
model_list[-c("lda")]
model_list[-c(lda)]
model_list[-c(lda),]
model_list[-c("lda)",]
model_list["lda"]
model_list[-"lda"]
subset(model_list, select=-lda)
other <- subset(model_list, select=-lda)
other <- subset(model_list, select=-"lda")
model_list["svmLinear", "svmRadial",
    "svmPoly", "ranger", "nb"]
good_stuff_list <- c("svmLinear", "svmRadial",
    "svmPoly", "ranger", "nb")
model_list[good_stuff_list]
model_list <- model_list[good_stuff_list]
results <- resamples(model_list)
# summarize the results
summary(results)
#
# test that the differences in models are significant
#
# difference in model predictions
diffs <- diff(results)
# summarize p-values for pair-wise comparisons
summary(diffs)
###
# PLOTS
###
pdf("output/classifier_parallel_plot.pdf")
parallelplot(results)
dev.off()
pdf("output/classifier_splom_plot.pdf")
splom(results)
dev.off()
pdf("output/classifier_density_plot.pdf")
densityplot(results)
dev.off()
# boxplots of results
pdf("output/classifier_box_plot.pdf")
bwplot(results)
dev.off()
# dot plots of results
pdf("output/classifier_dot_plot.pdf")
dotplot(results)
dev.off()
# ALSO: print all plots in one file for easy viewing
pdf("output/classifier_all.pdf")
#xyplot(results)
parallelplot(results)
splom(results)
densityplot(results)
bwplot(results)
dotplot(results)
dev.off()
q()
summary(model)
confusionMatrix(model)
library(caret)
confusionMatrix(model)
source("best_model_analysis.r")
q()
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    result <- logical()
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            result <- append(result, c)
        #}
    }
    # compute the accuracy
    accuracy <- length(result == TRUE) / length(result)
    print(accuracy)
    print(length(result==TRUE))
    print(sum(result))
    #print(result)
    return(accuracy)
}
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
summary(model
)
best_parameter_resamples <- subset(model$pred, cost == model$bestTune$cost)
# display the confusion matrix to get FRR FAR
#confusionMatrix(model)
cmatrix <- confusionMatrix(best_parameter_resamples$pred, best_parameter_resamples$obs,
    mode="everything")
library(caret)
best_parameter_resamples <- subset(model$pred, cost == model$bestTune$cost)
# display the confusion matrix to get FRR FAR
#confusionMatrix(model)
cmatrix <- confusionMatrix(best_parameter_resamples$pred, best_parameter_resamples$obs,
    mode="everything")
cmatrix   
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    result <- logical()
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            result <- append(result, c)
        #}
    }
    # compute the accuracy
    accuracy <- length(result) / sum(result)
    print(accuracy)
    #print(length(result==TRUE))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    result <- logical()
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            result <- append(result, c)
        #}
    }
    # compute the accuracy
    accuracy <- sum(result) / length(result)
    print(accuracy)
    print(result)
    print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    result <- logical(length=len)
    # for every unique pair
    for(i in 1:(nrow(resamples)-1)){
        for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            result <- append(result, c)
        }
    }
    # compute the accuracy
    accuracy <- sum(result) / length(result)
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
q()
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    result <- logical(length=len)
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            #result <- append(result, c)
            result[[i*nrow(resamples) + j]] <- c
        #}
    }
    # compute the accuracy
    accuracy <- sum(result) / length(result)
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
time_start <- proc.time()
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
memory.limit()
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    #len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    #result <- logical(length=len)
    result <- logical(length=nrow(resamples))
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            #result <- append(result, c)
            result[[i*nrow(resamples) + j]] <- c
        #}
    }
    # compute the accuracy
    accuracy <- sum(result) / length(result)
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
time_start <- proc.time()
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    #len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    #result <- logical(length=len)
    #result <- logical(length=nrow(resamples))
    #result <- logical()
    true_count = 0
    total_count = 0
    # for every unique pair
    j=1
    for(i in 1:(nrow(resamples)-1)){
        #for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            #result <- append(result, c)
            #result[[i*nrow(resamples) + j]] <- c
            if(c){
                true_count <- true_count + 1
            }
            total_count <- total_count +1
        #}
    }
    # compute the accuracy
    #accuracy <- sum(result) / length(result)
    accuracy <- true_count / total_count
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
time_start <- proc.time()
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
proc.time() - time_start
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    #len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    #result <- logical(length=len)
    #result <- logical(length=nrow(resamples))
    #result <- logical()
    true_count = 0
    total_count = 0
    # for every unique pair
    #j=1
    for(i in 1:(nrow(resamples)-1)){
        for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            #result <- append(result, c)
            #result[[i*nrow(resamples) + j]] <- c
            if(c){
                true_count <- true_count + 1
            }
            total_count <- total_count +1
        }
    }
    # compute the accuracy
    #accuracy <- sum(result) / length(result)
    accuracy <- true_count / total_count
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
cmatrix
pair_predicate_apply <- function(resamples, predicate){
    #TODO return x$pred x$obs for each class with predicate
    #data_frame <- data.frame(col.names=c("pred, obs"))
    #len = (nrow(resamples)*(nrow(resamples)-1)) / 2
    #result <- logical(length=len)
    #result <- logical(length=nrow(resamples))
    #result <- logical()
    true_count = 0
    total_count = 0
    # for every unique pair
    #j=1
    for(i in 1:(nrow(resamples)-1)){
        for(j in (i+1):nrow(resamples)){
            # determine if the prediction was correct in each i,j
            a <- resamples$pred[[i]] == resamples$obs[[i]]
            b <- resamples$pred[[j]] == resamples$obs[[j]]
            if(predicate == "and"){
                c <- a && b
            }
            if(predicate == "or"){
                c <- a || b
            }
            #result <- append(result, c)
            #result[[i*nrow(resamples) + j]] <- c
            if(c){
                true_count <- true_count + 1
            }
            total_count <- total_count +1
        }
    }
    # compute the accuracy
    #accuracy <- sum(result) / length(result)
    accuracy <- true_count / total_count
    print(accuracy)
    #print(result)
    #print(length(result))
    #print(sum(result))
    #print(result)
    return(accuracy)
}
predicate_resamples <- pair_predicate_apply(best_parameter_resamples, "and")
q()
source("svm_classifier.r")
summary(results)
q()
results$timings
results$metrics
results$models
results$values
cmatrix <- confusionMatrix(best_parameter_resamples$pred, best_parameter_resamples$obs,
    mode="prec_recall")
source("best_model_analysis.r")
q()
