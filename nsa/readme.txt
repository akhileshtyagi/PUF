Information Document

Purpose:
The purpose of this document is to provide whomever is
using these resources with a reference on what is available and
how the things which are provided work.

Development Enviornment:
These projects were devloped with one of...
Android Studio
Intellij IDEA

###
# Files
###

KeyboardAuthenticationInterface:
This project provides two things...
1. KeyboardAuthenticationService
2. KeyboardAuthentication
3. copy_jar.bash
(2) is likely what you will want to use.
(2) is a wrapper around KeyboardAuthenticationService
which provides and easier way of using it's functionality.
(3) coppies KeyboardAuthenticationinterface.jar to 
KeyboardAuthenticationService and SecondaryTestKeyboardAuthenticationService

KeyboardAuthenticationService:
Does nothing more than start the service provided in KeyboardAuthenticationInterface.

move_library_jar.bash:
This script moves KeyboardAuthenticationInterface.jar to be
used as a library in KeyboardAuthenticationService and KeyboardAuthenticationTest.
This will only work on my system, but it should give insight into
where the .jar files are located on every system.

SecondaryTestAuthenticationService:
This is the main test code for wrapper.KeyboardAuthentication.
IF the tests are successful
THEN there should be no output other than
*** TESTS BEGIN ***
*** TESTS END ***
In my tests this was the case,
indicating that everything is functioning properly

TestAuthenticationService:
This is the older test of just the plain
KeyboardAuthenticationService.
This was developed before
wrapper.KeyboardAuthentication.
Some things have changed since the development of this app.
It may no longer be functional.

###
# Functionality
###

KeyboardAuthentication:
A KeyboardAuthentication object provides the following functionality...
1. submit data (MotionEvent objects)
2. determine if a new result has been computed
3. retrieve last computed result

###
# Other Information
###

AnySoftKeyboard:
There exists a keyboard application we have modified
to submit MotionEvent objects to this service.

The MotionEvents are generated by key presses and
contain all necessary information

KeyboardAuthentication and
SecondaryTestAuthenticationService
are provided primarily as examples.
While KeyboardAuthentication is probabally useful as is,
many parts of it will likely need to be changed.

KeyboardAuthenticationService:
This service has a ChainBuilder object which is the programatic embodyment of
a Markov Chain based on user touch screen interactions.
ChainBuilder has two Chain(s).
One Chain containing the most resent touch events.
A second Chain containing events immediatly previous to the most resent events.
There is no overlap between the Chains.
The size of the Chains may be varied independently.
The total size of the two chains seems to matter most
for the authentication's accuracy.
This holds as long as one of the Chains isn't too small.
The service starts a thread to cause ChainBuilder to authenticate which takes two variables...
1. frequency
2. event_count
(1) provides the ability to set at what frequency authentications will take place, in milliseconds(ms).
(2) provides the ability to set a number of events that will trigger authentication.
In other words, when [ events since previous authentication ] > event_count then authenticate.
Event is defined as the submission of a MontionEvent to the service.
These (1,2) are defineded as constants inside KeyboardAuthenticationService.
The authentication process carried out by ChainBuilder is as follows...
1. construct a Markov Chain from each Chain in ChainBuilder
2. compare the Chains to derive a [ difference ] between them
3. autehntication probability is 1 - [ difference ]
