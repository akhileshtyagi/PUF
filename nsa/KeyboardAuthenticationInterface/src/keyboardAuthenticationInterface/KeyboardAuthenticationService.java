package keyboardAuthenticationInterface;

import android.app.Notification;
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.net.Uri;

/**
 * Created by tim on 7/1/16.
 *
 * This service acts as an intermediary
 * between the keyboard application and
 * other applications which use the authenticated value.
 */
public class KeyboardAuthenticationService extends Service {
    private boolean new_result_available;
    private double result;

    /**
     * returns the uri for starting the service
     */
    public static Uri get_start_uri(){
        return Uri.parse("START");
    }

    /**
     * create a constructor
     */
    public KeyboardAuthenticationService(){
        super();

        this.new_result_available = false;
        result = 0.0;

        Log.d("KAS", "service created");
    }

    /**
     * preform startup actions
     */
    @Override
    public int onStartCommand(Intent intent, int flags, int startId){
        Notification notification = create_notification();

        // start the service in the foreground
        // this will prevent it from being killed in most situations
        startForeground(5000, notification);

        Log.d("KAS", "service startup finished");

        return START_STICKY;
    }

    @Override
    public IBinder onBind(Intent intent) {
        //return new KeyboardAuthenticationBinder((KeyboardAuthenticationInterface)this);

        // return the binder interface we created
        return mBinder;
    }

    /**
     * define binder based on stub generated by .aidl file
     */
    private final IKeyboardAuthentication.Stub mBinder = new IKeyboardAuthentication.Stub() {
        @Override
        public boolean isNewResultAvailable() throws RemoteException {
            return is_new_result_available();
        }

        @Override
        public double receiveResult() throws RemoteException {
            return receive_result();
        }

        @Override
        public void sendData(double result) throws RemoteException {
            send_data(result);
        }
    };

    private boolean is_new_result_available() {
        return this.new_result_available;
    }

    /**
     * This is the result of the keyboard authentication
     *
     * This method should be called if
     * the desire is to acquire information from the service
     */
    private double receive_result() {
        this.new_result_available = false;
        return this.result;
    }

    /**
     * This method is used to send data to the service
     */
    private void send_data(double data) {
        this.result = data;
        this.new_result_available = true;
    }

    /**
     * create a notification to be shown while this service is active
     */
    private Notification create_notification(){
        Notification notification = new Notification.Builder(this)
                .setContentTitle("KAS")
                .setContentText("KeyboardAuthenticationService is running.")
                .build();

        return notification;
    }
}
