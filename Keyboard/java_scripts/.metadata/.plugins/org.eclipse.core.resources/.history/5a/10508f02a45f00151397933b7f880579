package test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.junit.Before;
import org.junit.Test;

public class UnitCompareChainsRank {
	private CompareChainsRank;
	
	@Before
	public void init(){
		
	}

	/**
	 * example test
	 */
	@Test
	public void test() {
		// run the private method
		String methodName = "computeSigma";
		Class[] classList = { java.util.List.class };
		Object[] methodParameters = { numbers };

		double answer = (double) runPrivateMethod(normalizedResponse, methodName, classList, methodParameters);
	}

	/**
	 * example test
	 */
	@Test
	public void test() {

	}

	/**
	 * returns the method result.
	 * 
	 * @param o
	 */
	private Object runPrivateMethod(Object o, String methodName, Class[] argClasses, Object[] methodParameters) {
		Method method = null;
		Object object = null;

		try {
			method = o.getClass().getDeclaredMethod(methodName, argClasses);

			// set method to accessible
			method.setAccessible(true);

			// invoke the method
			object = method.invoke(o, methodParameters);
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return object;
	}
}
